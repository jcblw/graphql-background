(self.webpackChunkfinch_docs=self.webpackChunkfinch_docs||[]).push([[77],{876:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5927:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var r=t(7560),a=t(8283),o=(t(2784),t(876)),i={id:"advanced-api-usage",title:"Advanced API usage"},s={unversionedId:"advanced-api-usage",id:"advanced-api-usage",isDocsHomePage:!1,title:"Advanced API usage",description:"Turning off introspection",source:"@site/docs/advanced-api-usage.md",sourceDirName:".",slug:"/advanced-api-usage",permalink:"/finch-graphql/docs/advanced-api-usage",editUrl:"https://github.com/jointoucan/finch-graphql/edit/master/packages/finch-docs/docs/advanced-api-usage.md",version:"current",frontMatter:{id:"advanced-api-usage",title:"Advanced API usage"},sidebar:"someSidebar",previous:{title:"API Setup",permalink:"/finch-graphql/docs/"},next:{title:"Client Setup",permalink:"/finch-graphql/docs/client-setup"}},c=[{value:"Turning off introspection",id:"turning-off-introspection",children:[]},{value:"Custom message keys",id:"custom-message-keys",children:[]},{value:"Using middleware",id:"using-middleware",children:[]},{value:"Running validation",id:"running-validation",children:[]}],l={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"turning-off-introspection"},"Turning off introspection"),(0,o.kt)("p",null,"Introspection is super useful for tools like GraphiQL, but can potentially expose functionality that you do not want to expose on clients. Finch GraphQL has the ability to turn off introspection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const api = new FinchApi({\n  typeDefs,\n  resolver,\n  disableIntrospection: true,\n});\n")),(0,o.kt)("p",null,"Now any type of introspection query will fail. This functionality is achieved using ",(0,o.kt)("a",{parentName:"p",href:"#running-validation"},"GraphQL Validation"),". "),(0,o.kt)("h2",{id:"custom-message-keys"},"Custom message keys"),(0,o.kt)("p",null,"In Finch GraphQL we use a generic message key of ",(0,o.kt)("inlineCode",{parentName:"p"},"finch-message"),", and if you wanted to have a custom message key that would be possible by passing in the custom message key to Finch GraphQL."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const api = new FinchApi({\n  typeDefs,\n  resolver,\n  messageKey: 'someThingSecret'\n});\n")),(0,o.kt)("p",null,"This allows you to make you connections with external source more secure by have a shared key to access the information in the extension. The also can help support older versions of Finch GraphQL."),(0,o.kt)("h2",{id:"using-middleware"},"Using middleware"),(0,o.kt)("p",null,"To be able to support a wide array of functionality like tracing, logging, and performances tracking Finch GraphQL has middleware functionality built into it. This is not needed for basic usage of Finch GraphQL but can give you insight in development if your queries are even being processed or how long things are taking to process."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const logTiming = async (resolve, root, args, context, info) => {\n  const timestamp = performance.now()\n  const result = await resolve(root, args, context, info)\n  console.log(`${info.operation.name} took ${Math.floor(performance.now() - timestamp)}ms`)\n  return result\n}\n\nconst api = new FinchApi({\n  typeDefs,\n  resolver,\n  middleware: [logTiming],\n})\n")),(0,o.kt)("p",null,"In the example above we are logging the operation name and the time it takes to run the operation. This should look something like this in the console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"getUserInfo took 3ms\n")),(0,o.kt)("p",null,"There is many possibilities with this functionality, and here is a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/maticzav/graphql-middleware#awesome-middlewares-"},"list of modules")," that potentially can work with this middleware. "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This middleware modules primary use cases are server side GraphQL APIs and may run into issues running in a browser environment.")),(0,o.kt)("h2",{id:"running-validation"},"Running validation"),(0,o.kt)("p",null,"GraphQL has built in validation and we expose that functionality to allow you to setup custom validators for graph."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLError } from 'graphql';\n\nconst NoIntrospection = (context) => {\n  return {\n    Field(node) {\n      if (node.name.value === '__schema' || node.name.value === '__type') {\n        context.reportError(\n          new GraphQLError('Introspection is disabled', [node]),\n        );\n      }\n    },\n  };\n};\n\nconst api = new FinchApi({\n  typeDefs,\n  resolver,\n  rules: [NoIntrospection],\n});\n")),(0,o.kt)("p",null,"Above is an internal implementation that allows use to turn off introspection. The official docs around this functionality can be found ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.org/graphql-js/validation/"},"here"),"."))}p.isMDXComponent=!0}}]);