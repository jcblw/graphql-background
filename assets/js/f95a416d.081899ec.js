(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{88:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return s})),t.d(r,"metadata",(function(){return i})),t.d(r,"toc",(function(){return p})),t.d(r,"default",(function(){return l}));var n=t(3),a=t(7),o=(t(0),t(92)),s={id:"api-setup",title:"API Setup",sidebar_label:"Setup background API",slug:"/"},i={unversionedId:"api-setup",id:"api-setup",isDocsHomePage:!1,title:"API Setup",description:"Initialize Finch Api",source:"@site/docs/api-setup.md",sourceDirName:".",slug:"/",permalink:"/finch-graphql/docs/",editUrl:"https://github.com/jointoucan/finch-graphql/edit/master/packages/finch-docs/docs/api-setup.md",version:"current",sidebar_label:"Setup background API",frontMatter:{id:"api-setup",title:"API Setup",sidebar_label:"Setup background API",slug:"/"},sidebar:"someSidebar",previous:{title:"How it works",permalink:"/finch-graphql/docs/how-it-works"},next:{title:"Advanced API usage",permalink:"/finch-graphql/docs/advanced-api-usage"}},p=[{value:"Initialize Finch Api",id:"initialize-finch-api",children:[{value:"TypeDefs",id:"typedefs",children:[]},{value:"Resolvers",id:"resolvers",children:[]}]}],c={toc:p};function l(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,t,{components:r,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"initialize-finch-api"},"Initialize Finch Api"),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"FinchApi")," class is a class that allows you to create an executable graphql schema. It is modeled to look just like the ",Object(o.b)("strong",{parentName:"p"},"ApolloServer")," class. The only required properties in the options are typeDefs and resolvers."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { FinchApi } from '@finch-graphql/api';\nimport { typeDefs } from './typeDefs';\nimport { resolvers } from './resolvers';\n\n// Create the executable schema\nconst api = new FinchApi({\n  typeDefs,\n  resolver,\n});\n")),Object(o.b)("h3",{id:"typedefs"},"TypeDefs"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TypeDefs")," are schemas for the GraphQL api. These can be a GraphQL document or and array of GraphQL documents. These help you define what the graph contracts of your GraphQL api."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import gql from 'graphql-tag';\n\nconst browserSchema = gql`\n  input PermissionsInput {\n    origins: [String!]\n    permissions: [String!]\n  }\n\n  type Browser {\n    permissions(input: PermissionsInput!): Boolean!\n  }\n\n  type Query {\n    browser: Browser!\n  }\n`;\n\nexport const typeDefs = [browserSchema];\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"typeDefs")," exported in the example above can be passed to ",Object(o.b)("strong",{parentName:"p"},"FinchAPI")," as the key ",Object(o.b)("em",{parentName:"p"},"typeDefs")," and we now have a schema."),Object(o.b)("p",null,"You can learn more about what can go into a schema in the ",Object(o.b)("a",{parentName:"p",href:"https://graphql.org/learn/schema/"},"official GraphQL docs"),"."),Object(o.b)("h3",{id:"resolvers"},"Resolvers"),Object(o.b)("p",null,"Resolvers are functions that can be executed in the graph that will allow your to asynchronously query or mutate data. This is the same shape as you would have setting up resolvers in ",Object(o.b)("strong",{parentName:"p"},"ApolloServer"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const browserResolvers = {\n  Browser: {\n    permissions: (_browser, { input }) => browser.permissions.contains(input),\n  },\n  Query: {\n    browser: () => ({});\n  }\n}\n\nexport const resolvers = {\n  Browser: browserResolvers.Browser,\n  Query: {\n    ...browserResolvers.Query\n  }\n}\n")),Object(o.b)("p",null,"The exported ",Object(o.b)("strong",{parentName:"p"},"resolvers")," variable can now be passed to ",Object(o.b)("strong",{parentName:"p"},"FinchApi")," to be able to setup the functions that get ran when a resolver is queried on the graph."),Object(o.b)("p",null,"Read more about resolvers in the ",Object(o.b)("a",{parentName:"p",href:"https://graphql.org/learn/execution/#root-fields-resolvers"},"official GraphQL docs"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { FinchMessageKey } from '@finch-graphql/api';\nimport { api } from './graphql-api';\n\nbrowser.runtime.onMessage.addListener(message => {\n  if (message.type === FinchMessageKey.Generic) {\n    return api.onMessage(message);\n  }\n  // ... do other message stuff\n}, []);\n")),Object(o.b)("p",null,"This will allow you to have your custom messages working properly and be able to use Finch GraphQL as well."))}l.isMDXComponent=!0},92:function(e,r,t){"use strict";t.d(r,"a",(function(){return u})),t.d(r,"b",(function(){return m}));var n=t(0),a=t.n(n);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),l=function(e){var r=a.a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=l(e.components);return a.a.createElement(c.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},h=a.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),h=n,m=u["".concat(s,".").concat(h)]||u[h]||b[h]||o;return t?a.a.createElement(m,i(i({ref:r},c),{},{components:t})):a.a.createElement(m,i({ref:r},c))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=h;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);